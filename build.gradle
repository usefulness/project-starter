import org.jetbrains.kotlin.gradle.plugin.KotlinPluginWrapperKt

plugins {
    alias(libs.plugins.starter.config)
    alias(libs.plugins.starter.versioning)
    alias(libs.plugins.kotlin.jvm) apply(false)
    alias(libs.plugins.starter.library.kotlin) apply(false)
    alias(libs.plugins.kotlinx.binarycompatibility) apply(false)
}

commonConfig {
    javaFilesAllowed false
    javaVersion JavaVersion.VERSION_11
}

allprojects {
    pluginManager.withPlugin("kotlin") { plugin ->
        def kotlinVersion = KotlinPluginWrapperKt.getKotlinPluginVersion(project)
        configurations.configureEach {
            resolutionStrategy.eachDependency {
                if (requested.group == 'org.jetbrains.kotlin' && requested.name.startsWith("kotlin")) {
                    useVersion kotlinVersion
                }
            }
        }
        kotlin {
            jvmToolchain(20)
        }
    }
    tasks.withType(Test).configureEach {
        doLast {
            Thread.sleep(2000) // https://github.com/gradle/gradle/issues/16603
        }
    }

    pluginManager.withPlugin("java") {
        if (project.hasProperty("skipJarVersion")) {
            tasks.named("jar") {
                archiveFile.set(new File(project.buildDir, "libs/${project.name}.jar"))
            }
        }
    }
    // TODO remove after project uses latest jacoco version
    pluginManager.withPlugin("jacoco") {
        afterEvaluate {
            jacoco {
                toolVersion = "0.8.10"
            }
        }
    }
}
