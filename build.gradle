import org.jetbrains.kotlin.gradle.plugin.KotlinPluginWrapperKt

plugins {
    alias(libs.plugins.starter.config)
    alias(libs.plugins.starter.versioning)
    alias(libs.plugins.kotlin.jvm) apply(false)
    alias(libs.plugins.starter.library.kotlin) apply(false)
    alias(libs.plugins.kotlinx.binarycompatibility) apply(false)
}

commonConfig {
    javaFilesAllowed false
    javaVersion JavaVersion.VERSION_11
}

allprojects {
    pluginManager.withPlugin("org.jetbrains.kotlin.jvm") { plugin ->
        def kotlinVersion = KotlinPluginWrapperKt.getKotlinPluginVersion(project)
        configurations.matching { it.name != "detekt" }.configureEach {
            resolutionStrategy.eachDependency {
                if (requested.group == 'org.jetbrains.kotlin' && requested.name.startsWith("kotlin")) {
                    useVersion kotlinVersion
                }
            }
        }
        kotlin {
            jvmToolchain(libs.versions.java.compilation.get().toInteger())
        }
    }
    pluginManager.withPlugin("java-gradle-plugin") {
        configurations {
            register("testRuntimeDependencies") {
                attributes {
                    // KGP publishes multiple variants https://kotlinlang.org/docs/whatsnew17.html#support-for-gradle-plugin-variants
                    attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage.class, Usage.JAVA_RUNTIME))
                    attribute(Category.CATEGORY_ATTRIBUTE, project.objects.named(Category.class, Category.LIBRARY))
                }
            }
        }

        // Required to put the Kotlin plugin on the classpath for the functional test suite
        tasks.withType(PluginUnderTestMetadata).configureEach {
            pluginClasspath.from(configurations.testRuntimeDependencies)
        }

    }
    tasks.withType(Test).configureEach {
        doLast {
            Thread.sleep(2000) // https://github.com/gradle/gradle/issues/16603
        }
    }

    pluginManager.withPlugin("java") {
        if (project.hasProperty("skipJarVersion")) {
            def projectName = project.name
            tasks.named("jar") {
                archiveFile.set(layout.buildDirectory.map {it.file("libs/${projectName}.jar")})
            }
        }
    }
}
