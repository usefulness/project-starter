plugins {
    id("java-gradle-plugin")
    alias(libs.plugins.starter.library.kotlin)
    alias(libs.plugins.kotlin.samwithreceiver)
    alias(libs.plugins.kotlinx.binarycompatibility)
    id("com.starter.publishing")
}

dependencies {
    compileOnly(libs.jetbrains.kotlin.jvm.api)
    compileOnly(libs.agp.gradle.api)
    api libs.usefulness.ktlint
    api libs.detekt.gradle
    implementation libs.usefulness.issuechecker
    implementation project(":config")

    testImplementation project(":testing")

    testRuntimeOnly(libs.junit.platform.launcher)
    testRuntimeDependencies(libs.jetbrains.kotlin.jvm.implementation)
    testRuntimeDependencies(libs.agp.gradle.implementation)
}

tasks.named("test") {
    useJUnitPlatform()
}

tasks.register("generateVersionProperties", WriteProperties) { writeProps ->
    def propertiesFile = new File(sourceSets.main.output.resourcesDir, "starter-quality-gradle-plugin.properties")
    if (GradleVersion.current() >= GradleVersion.version("8.1")) {
        writeProps.destinationFile = propertiesFile
    } else {
        //noinspection GrDeprecatedAPIUsage
        writeProps.outputFile = propertiesFile
    }
    writeProps.property("ktlint_version", libs.versions.maven.ktlint)
}

tasks.named("processResources") {
    dependsOn("generateVersionProperties")
}

gradlePlugin {
    plugins {
        quality {
            id = 'com.starter.quality'
            displayName = 'Code Quality Plugin'
            implementationClass = 'com.project.starter.quality.plugins.QualityPlugin'
        }
    }
}
